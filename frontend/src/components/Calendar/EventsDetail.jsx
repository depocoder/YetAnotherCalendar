import React, { useState, useEffect } from 'react';
import arrowGreen from "../../img/ArrowGreen.svg";
import arrowPink from "../../img/ArrowPink.svg";
import arrowViolet from "../../img/ArrowViolet.svg";
import { formatDate } from "../../utils/dateUtils";

const EventsDetail = ({ event, mtsUrls = {} }) => {
    const [isVisible, setIsVisible] = useState(false);
    const [shouldRender, setShouldRender] = useState(false);

    useEffect(() => {
        if (event) {
            setShouldRender(true);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => setIsVisible(true), 10);
        } else {
            setIsVisible(false);
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ DOM
            setTimeout(() => setShouldRender(false), 300);
        }
    }, [event]);

    if (!shouldRender) return null;


    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
    const getSourceInfo = () => {
        if (event.type === 'netology') {
            return {
                label: '–ù–µ—Ç–æ–ª–æ–≥–∏—è',
                icon: arrowGreen,
                date: event.starts_at || event.deadline,
            };
        }
        if (['quiz', 'task', 'test'].includes(event.type)) {
            return {
                label: event.type === 'quiz' ? '–ù–µ—Ç–æ–ª–æ–≥–∏—è –¢–µ—Å—Ç' : event.type === 'task' ? '–ù–µ—Ç–æ–ª–æ–≥–∏—è –ó–∞–¥–∞—á–∞' : '–ù–µ—Ç–æ–ª–æ–≥–∏—è –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                icon: arrowPink,
                date: event.start || event.deadline,
            };
        }
        if (event.type === 'modeus') {
            return {
                label: '–¢—é–º–ì–£',
                icon: arrowViolet,
                date: event.start,
            };
        }
        if (event.source === 'utmn') {
            return {
                label: '–¢—é–º–ì—É',
                icon: arrowPink,
                date: event.dt_end,
            };
        }
        return {
            label: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫',
            icon: arrowPink,
            date: '',
        };
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º getSourceInfo
    const sourceInfo = event ? getSourceInfo() : null;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    const getEventButtonColor = () => {
        if (event.type === 'netology') {
            return '#00A8A8'; // Teal
        }
        if (['quiz', 'task', 'test'].includes(event.type)) {
            return '#3492c5'; // Blue
        }
        if (event.type === 'modeus') {
            return '#7B61FF'; // Purple
        }
        if (event.source === 'utmn') {
            return '#f46386'; // Pink
        }
        return '#7B61FF'; // Default purple
    };

    const buttonColor = event ? getEventButtonColor() : '#7B61FF';

    return (
        <div className={`rectangle ${isVisible ? 'rectangle-visible' : 'rectangle-hidden'}`}>
            {event && sourceInfo && (
                <div className={`rectangle-info ${event.type || event.source}`}>
                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è */}
                    <div className="source">
                        {sourceInfo.label}
                        <span className="date-event">
                            <img src={sourceInfo.icon} alt="Arrow" />
                            {formatDate(sourceInfo.date)}
                        </span>
                    </div>

                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
                    <div className="name-event">
                        <span className="name-event-text name-event-text--no-link">
                            {event.title || event.name}
                        </span>
                    </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {event.type === 'netology' && (
                    <div className="task-event">
                        <div className="netology-info-container">
                            {event?.experts?.[0]?.avatar_path && (
                                <div className="avatar_path">
                                    <img
                                        src={event?.experts?.[0]?.avatar_path}
                                        alt={event?.experts?.[0]?.full_name || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                                    />
                                </div>
                            )}
                            <div className="netology-text-info">
                                {event?.experts?.[0]?.full_name && (
                                    <div className="netology-info-row">
                                        <span className="netology-label">üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <span className="netology-value">{event.experts[0].full_name}</span></span>
                                    </div>
                                )}
                                {event.block_title && (
                                    <div className="netology-info-row">
                                        <span className="netology-label">üìö –ö—É—Ä—Å: <span className="netology-value">{event.block_title}</span></span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}
                {['quiz', 'task', 'test'].includes(event.type) && event.type !== 'netology' && (
                    <div className="task-event">
                        <span className="task-event-text">
                            {event.block_title || '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </span>
                        <br/>
                        <span className="task-event-text">
                            –ü—Ä–æ–π–¥–µ–Ω–æ: {event.passed ? '‚úÖ' : '‚ùå'}
                        </span>

                    </div>
                )}
                {event.type === 'modeus' && (
                    <div className="task-event">
                        <div className="netology-info-container">
                            {event?.teacher_profile?.avatar_profile && (
                                <div className="avatar_path">
                                    <a 
                                        href={event.teacher_profile.profile_url} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        title="–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                                    >
                                        <img
                                            src={event.teacher_profile.avatar_profile}
                                            alt={event.teacher_full_name || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                                            onError={(e) => { e.target.style.display = 'none'; }}
                                        />
                                    </a>
                                </div>
                            )}
                            <div className="netology-text-info">
                                {event.teacher_full_name && (
                                    <div className="netology-info-row">
                                        <span className="netology-label">üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <span className="netology-value">{event.teacher_full_name}</span></span>
                                    </div>
                                )}
                                {event.course_name && (
                                    <div className="netology-info-row">
                                        <span className="netology-label">üìö –ö—É—Ä—Å: <span className="netology-value">{event.course_name}</span></span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}
                {event.source === 'utmn' && (
                    <div className="task-event">
                        <span className="task-event-text">
                            –ö—É—Ä—Å: {event.course_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </span>
                        <span className="task-event-text">
                            –ú–æ–¥—É–ª—å: {event.modname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </span>
                        <span className="task-event-text">
                            –°—Ç–∞—Ç—É—Å: {event.is_completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                        </span>
                    </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫—É –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É */}
                {(() => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    let eventUrl = null;
                    if (event.type === 'modeus') {
                        eventUrl = mtsUrls[event.id];
                    } else {
                        eventUrl = event.url || event.video_url || event.webinar_url;
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                    if (eventUrl) {
                        return (
                            <div className="lesson-button-container">
                                <a 
                                    href={eventUrl} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="lesson-button"
                                    style={{
                                        '--button-color': buttonColor
                                    }}
                                >
                                    –ü–µ—Ä–µ–π—Ç–∏ ‚ûú
                                </a>
                            </div>
                        );
                    }
                    return null;
                })()}
                </div>
            )}
        </div>
    );
};

export default EventsDetail;