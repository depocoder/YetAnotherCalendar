import React from 'react';
import {
    exportICS,
    getCalendarIdLocalStorage,
    getJWTTokenFromLocalStorage,
    getLMSIdFromLocalStorage,
    getLMSTokenFromLocalStorage,
    getTokenFromLocalStorage
} from "../../services/api";
import { toast } from 'react-toastify';

const ICSExporter = ({ date }) => {
    const downloadICSFile = async () => {
        const calendarId = getCalendarIdLocalStorage();

        try {
            const icsContent = await exportICS({
                calendarId,
                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                timeMin: date.start,
                timeMax: date.end,
                sessionToken: getTokenFromLocalStorage(),
                jwtToken: getJWTTokenFromLocalStorage(),
                lxpToken: getLMSTokenFromLocalStorage(),
                lxpId: getLMSIdFromLocalStorage()
            });

            if (!icsContent.data) {
                console.error("ICS —ç–∫—Å–ø–æ—Ä—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª:", icsContent); // üîç –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                toast.error("–§–∞–π–ª –Ω–µ –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                return;
            }

            const blob = new Blob([icsContent.data], { type: "text/calendar" });
            const url = URL.createObjectURL(blob);

            const a = document.createElement("a");
            a.href = url;
            a.download = "schedule.ics";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ .ics:", error);
            toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    };

    return (
        <button className="export-btn" onClick={downloadICSFile}>
            –≠–∫—Å–ø–æ—Ä—Ç .ics
        </button>
    );
};

export default ICSExporter;
