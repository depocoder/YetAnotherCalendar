import React, { useEffect, useRef, useState } from 'react';
import {
    getNetologyCourse,
    bulkEvents,
    getTokenFromLocalStorage,
    getCalendarIdLocalStorage,
    getJWTTokenFromLocalStorage,
    getLMSTokenFromLocalStorage,
    getLMSIdFromLocalStorage,
    getMtsLinks
} from '../services/api';
import { toast } from 'react-toastify';
import Loader from "../elements/Loader";
import '../style/header.scss';
import '../style/calendar.scss';
import DatePicker from "../components/Calendar/DataPicker";
import ExitBtn from "../components/Calendar/ExitBtn";
import ICSExporter from "../components/Calendar/ICSExporter";
import CacheUpdateBtn from "../components/Calendar/CacheUpdateBtn";
import { getCurrentWeekDates } from "../utils/dateUtils";
import EventsDetail from "../components/Calendar/EventsDetail";
import DeadLine from "../components/Calendar/DeadLine";
import DaysNumber from "../components/Calendar/DaysNumber";
import LessonTimes from "../components/Calendar/LessonTimes";
import GitHubStarModal from "../components/GitHubStarModal";
import FeaturesModal from "../components/FeaturesModal";


const CalendarPage = () => {
    const [date, setDate] = useState(() => getCurrentWeekDates());
    const [events, setEvents] = useState(null);
    const [loading, setLoading] = useState(false);
    const [selectedEvent, setSelectedEvent] = useState(null);
    const [isTransitioning, setIsTransitioning] = useState(false);
    const [showGithubModal, setShowGithubModal] = useState(false);
    const [showFeaturesModal, setShowFeaturesModal] = useState(false);
    const [mtsUrls, setMtsUrls] = useState({});

    const lastFetchedDate = useRef(null);

    //console.log('[CalendarPage render]');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ GitHub Star
    useEffect(() => {
        const hasSeenGithubModal = localStorage.getItem('githubStarModalShown');
        const remindDateStr = localStorage.getItem('githubStarRemindDate');
        const firstVisitStr = localStorage.getItem('calendarFirstVisit');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!firstVisitStr) {
            const firstVisitDate = new Date();
            localStorage.setItem('calendarFirstVisit', firstVisitDate.toISOString());
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
        }
        
        let shouldShowModal = false;
        const firstVisitDate = new Date(firstVisitStr);
        const currentDate = new Date();
        const daysSinceFirstVisit = (currentDate - firstVisitDate) / (1000 * 60 * 60 * 24);
        
        if (!hasSeenGithubModal && !remindDateStr) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞
            if (daysSinceFirstVisit >= 7) {
                shouldShowModal = true;
            }
        } else if (remindDateStr && !hasSeenGithubModal) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –Ω–µ–¥–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            const remindDate = new Date(remindDateStr);
            
            if (currentDate >= remindDate) {
                // –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                shouldShowModal = true;
                // –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                localStorage.removeItem('githubStarRemindDate');
            }
        }
        
        if (shouldShowModal) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            const timer = setTimeout(() => {
                setShowGithubModal(true);
            }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
            return () => clearTimeout(timer);
        }
    }, []);

    useEffect(() => {
        const dateKey = `${date.start}_${date.end}`;
        if (lastFetchedDate.current === dateKey) return;
        lastFetchedDate.current = dateKey;

        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–µ–¥–µ–ª–∏
        setSelectedEvent(null);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
        setIsTransitioning(true);

        const fetchData = async () => {
            //console.log('[fetchCourseAndEvents called]', dateKey);
            setLoading(true);

            try {
                let calendarId = getCalendarIdLocalStorage();

                if (!calendarId) {
                    const courseData = await getNetologyCourse(getTokenFromLocalStorage());
                    calendarId = courseData?.id;
                    localStorage.setItem('calendarId', calendarId);
                }

                if (!calendarId) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ calendar id:', calendarId);
                    toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    return;
                }

                const eventsResponse = await bulkEvents({
                    calendarId,
                    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    timeMin: date.start,
                    timeMax: date.end,
                    sessionToken: getTokenFromLocalStorage(),
                    jwtToken: getJWTTokenFromLocalStorage(),
                    lxpToken: getLMSTokenFromLocalStorage(),
                    lxpId: getLMSIdFromLocalStorage()
                });

                if (eventsResponse?.data) {
                    setEvents(eventsResponse.data);
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ CacheUpdateBtn
                    console.log('üìÖ Cache timestamp from API:', eventsResponse.data.cached_at);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Modeus —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö MTS —Å—Å—ã–ª–∫–∏
                    const modeusEvents = eventsResponse.data?.utmn?.modeus_events || [];
                    const lessonIds = modeusEvents.map(event => event.id).filter(Boolean);
                    
                    if (lessonIds.length > 0) {
                        try {
                            const mtsResponse = await getMtsLinks(lessonIds);
                            if (mtsResponse?.status === 200 && mtsResponse.data?.links) {
                                setMtsUrls(mtsResponse.data.links);
                            }
                        } catch (error) {
                            console.error('Error loading MTS URLs:', error);
                            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                        }
                    }
                } else {
                    toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
                    console.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç bulkEvents:", eventsResponse);
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
                toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
            } finally {
                setLoading(false);
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => setIsTransitioning(false), 100);
            }
        };

        fetchData();
    }, [date]);

    const handleDataUpdate = (updatedEvents) => {
        setEvents(updatedEvents);
    };

    const handleCloseGithubModal = () => {
        setShowGithubModal(false);
    };

    return (
        <div className="calendar-page">
            <GitHubStarModal 
                isOpen={showGithubModal}
                onClose={handleCloseGithubModal}
            />
            <FeaturesModal 
                isOpen={showFeaturesModal}
                onClose={() => setShowFeaturesModal(false)}
                onOpenGithubModal={() => setShowGithubModal(true)}
            />
            <div className="wrapper">
                <header className="header">
                    <div className="header-line">
                        <div className="shedule-export">
                            <span className="shedule">–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</span>
                            <ICSExporter date={date} />
                            <CacheUpdateBtn 
                                date={date} 
                                onDataUpdate={handleDataUpdate}
                                cachedAt={events?.cached_at}
                                calendarReady={!loading && !isTransitioning && events !== null}
                            />
                            <button 
                                className="features-trigger-btn"
                                onClick={() => setShowFeaturesModal(true)}
                                title="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
                            >
                                ‚ú® –û –ø—Ä–æ–µ–∫—Ç–µ
                            </button>
                        </div>
                        <ExitBtn />
                    </div>


                    <div className="events-container">
                        <EventsDetail event={selectedEvent} mtsUrls={mtsUrls} />
                    </div>
                    <DatePicker setDate={setDate} initialDate={date} disableButtons={loading} />
                </header>

                <div className={`calendar ${loading || isTransitioning ? 'calendar-loading' : 'calendar-loaded'}`}>
                    {loading ? (
                        <Loader />
                    ) : (
                        <table className="shedule-table">
                            <thead>
                                <DaysNumber date={date} />
                                <DeadLine date={date} events={events} setSelectedEvent={setSelectedEvent} />
                            </thead>
                            <tbody>
                                <LessonTimes
                                    events={events}
                                    selectedEvent={selectedEvent}
                                    setSelectedEvent={setSelectedEvent}
                                />
                            </tbody>
                        </table>
                    )}
                </div>
            </div>
        </div>
    );
};

export default CalendarPage;