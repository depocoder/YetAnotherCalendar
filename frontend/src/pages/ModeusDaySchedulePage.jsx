import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { getDayEvents, saveLinkToEvent, getJWTTokenFromLocalStorage } from '../services/api';
import Loader from "../elements/Loader";
import ExitBtn from "../components/Calendar/ExitBtn";

import '../style/header.scss';
import '../style/calendar.scss';
import '../style/modeus.scss';



const ModeusDaySchedulePage = () => {
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
    const [selectedYear, setSelectedYear] = useState([2024]);
    const [profileName, setProfileName] = useState(["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ IT-–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"]);
    const [specialtyCode, setSpecialtyCode] = useState(["09.03.02"]);
    const [events, setEvents] = useState([]);
    const [loading, setLoading] = useState(false);
    const [linkInputs, setLinkInputs] = useState({});
    const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤ (2023-2026)
    const yearOptions = [];
    for (let year = 2023; year <= 2026; year++) {
        yearOptions.push(year);
    }

    // –û–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const profileOptions = [
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ IT-–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    ];

    // –û–ø—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const specialtyOptions = [
        "09.03.02",
        "09.03.01", 
        "09.03.04",
        "10.03.01"
    ];

    const fetchEvents = async () => {
        const token = getJWTTokenFromLocalStorage();
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Modeus:', !!token);
        
        if (!token) {
            toast.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Modeus. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            console.error('–¢–æ–∫–µ–Ω Modeus –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
            return;
        }

        setLoading(true);
        try {
            const response = await getDayEvents(
                selectedDate,
                selectedYear,
                profileName,
                specialtyCode
            );

            if (response?.data) {
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                const eventsData = Array.isArray(response.data) ? response.data : [];
                const sortedEvents = eventsData.sort((a, b) => {
                    if (!a.start || !b.start) return 0;
                    return new Date(a.start) - new Date(b.start);
                });
                setEvents(sortedEvents);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è —Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å ID)
                const initialLinks = {};
                sortedEvents.filter(event => event && event.id).forEach(event => {
                    initialLinks[event.id] = '';
                });
                setLinkInputs(initialLinks);
                
                console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:", sortedEvents.length);
                console.log("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö events:", typeof sortedEvents, sortedEvents);
            } else {
                toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
                console.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç getDayEvents:", response);
                console.error("–¢–∏–ø response.data:", typeof response?.data, response?.data);
                setEvents([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω Modeus.");
            setEvents([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchEvents();
    }, [selectedDate, selectedYear, profileName, specialtyCode]);

    const handleDateChange = (e) => {
        setSelectedDate(e.target.value);
    };

    const handleYearChange = (e) => {
        const value = Array.from(e.target.selectedOptions, option => parseInt(option.value));
        setSelectedYear(value);
    };

    const handleProfileChange = (e) => {
        const value = Array.from(e.target.selectedOptions, option => option.value);
        setProfileName(value);
    };

    const handleSpecialtyChange = (e) => {
        const value = Array.from(e.target.selectedOptions, option => option.value);
        setSpecialtyCode(value);
    };

    const handleLinkInputChange = (eventId, value) => {
        setLinkInputs(prev => ({
            ...prev,
            [eventId]: value
        }));
    };

    const handleSaveLink = async (eventId) => {
        const url = linkInputs[eventId];
        if (!url.trim()) {
            toast.error("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
        try {
            new URL(url);
        } catch {
            toast.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (—Å http:// –∏–ª–∏ https://)");
            return;
        }

        try {
            const response = await saveLinkToEvent(eventId, url);
            if (response?.status === 200) {
                toast.success("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
                setLinkInputs(prev => ({
                    ...prev,
                    [eventId]: ''
                }));
            } else {
                toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É");
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', error);
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏");
        }
    };

    const handleBulkSaveLinks = async () => {
        const linksToSave = Object.entries(linkInputs).filter(([eventId, url]) => url.trim());
        
        if (linksToSave.length === 0) {
            toast.error("–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ URL
        for (const [eventId, url] of linksToSave) {
            try {
                new URL(url);
            } catch {
                toast.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${events.find(e => e.id === eventId)?.name || eventId}`);
                return;
            }
        }

        let successCount = 0;
        let errorCount = 0;

        toast.info(`–°–æ—Ö—Ä–∞–Ω—è–µ–º ${linksToSave.length} —Å—Å—ã–ª–æ–∫...`);

        for (const [eventId, url] of linksToSave) {
            try {
                const response = await saveLinkToEvent(eventId, url);
                if (response?.status === 200) {
                    successCount++;
                } else {
                    errorCount++;
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventId}:`, error);
                errorCount++;
            }
        }

        // –û—á–∏—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        if (successCount > 0) {
            setLinkInputs(prev => {
                const newInputs = { ...prev };
                for (const [eventId, url] of linksToSave) {
                    newInputs[eventId] = '';
                }
                return newInputs;
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (successCount > 0 && errorCount === 0) {
            toast.success(`‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! (${successCount})`);
        } else if (successCount > 0 && errorCount > 0) {
            toast.warning(`‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);
        } else {
            toast.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ (${errorCount} –æ—à–∏–±–æ–∫)`);
        }
    };

    const formatTime = (dateTimeString) => {
        return new Date(dateTimeString).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    };

    return (
        <div className="modeus-page">
            <div className="wrapper">
                <header className="header">
                    <div className="header-line">
                        <div className="shedule-export">
                            <span className="modeus-page-title">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ Modeus –Ω–∞ –¥–µ–Ω—å</span>
                        </div>
                        <ExitBtn />
                    </div>





                    <div className="modeus-filters-container">
                        
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <div className="filters-header">
                            <h3>üéØ <span className="gradient-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</span></h3>
                            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π –≤ Modeus</p>
                        </div>

                        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                        <div className="filters-main-grid">
                            <div className="modern-input-group">
                                <label htmlFor="date-input">üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</label>
                                <div className="input-container">
                                    <input
                                        id="date-input"
                                        type="date"
                                        value={selectedDate}
                                        onChange={handleDateChange}
                                    />
                                </div>
                            </div>

                            <div className="modern-input-group">
                                <label htmlFor="year-select">üéì –ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</label>
                                <div className="input-container">
                                    <select
                                        id="year-select"
                                        multiple
                                        value={selectedYear.map(String)}
                                        onChange={handleYearChange}
                                        title="–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–µ—Ç"
                                    >
                                        {yearOptions.map(year => (
                                            <option key={year} value={year}>
                                                {year}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <small>üí° Ctrl+–∫–ª–∏–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞</small>
                            </div>

                            <div className="filter-buttons">
                                <button
                                    onClick={fetchEvents}
                                    disabled={loading}
                                    className="primary"
                                >
                                    {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üöÄ –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è'}
                                </button>

                                <button onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}>
                                    {showAdvancedFilters ? 'üîº –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : '‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                                </button>
                            </div>
                        </div>

                        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                        {showAdvancedFilters && (
                            <div className="filters-advanced">
                                <div className="modern-input-group wide">
                                    <label htmlFor="profile-select">üíº –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</label>
                                    <div className="input-container">
                                        <select
                                            id="profile-select"
                                            multiple
                                            value={profileName}
                                            onChange={handleProfileChange}
                                            className="large"
                                            title="–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"
                                        >
                                            {profileOptions.map(profile => (
                                                <option key={profile} value={profile}>
                                                    {profile}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                </div>

                                <div className="modern-input-group">
                                    <label htmlFor="specialty-select">üìö –ö–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</label>
                                    <div className="input-container">
                                        <select
                                            id="specialty-select"
                                            multiple
                                            value={specialtyCode}
                                            onChange={handleSpecialtyChange}
                                            className="large"
                                            title="–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Ctrl –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π"
                                        >
                                            {specialtyOptions.map(specialty => (
                                                <option key={specialty} value={specialty} className="monospace">
                                                    {specialty}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </header>

                <div className={`schedule-content ${loading ? 'calendar-loading' : 'calendar-loaded'}`}>
                    {loading ? (
                        <Loader />
                    ) : (
                        <div className="events-list modeus-events-list">

                            
                            <div className="modeus-schedule-header">
                                <h2>üìÖ <span className="schedule-gradient-text">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatDate(selectedDate)}</span></h2>
                                <p>
                                    {(() => {
                                        const filteredEvents = events.filter(event => event && event.id && !event.is_lxp);
                                        const lxpEvents = events.filter(event => event && event.id && event.is_lxp);
                                        
                                        if (filteredEvents.length > 0) {
                                            const eventText = filteredEvents.length === 1 ? '—Å–æ–±—ã—Ç–∏–µ' : filteredEvents.length < 5 ? '—Å–æ–±—ã—Ç–∏—è' : '—Å–æ–±—ã—Ç–∏–π';
                                            const lxpText = lxpEvents.length > 0 ? ` (—Å–∫—Ä—ã—Ç–æ ${lxpEvents.length} LXP)` : '';
                                            return `–ù–∞–π–¥–µ–Ω–æ ${filteredEvents.length} ${eventText}${lxpText}`;
                                        } else if (events.length > 0) {
                                            return '–í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã (—Ç–æ–ª—å–∫–æ LXP —Å–æ–±—ã—Ç–∏—è)';
                                        } else {
                                            return '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π';
                                        }
                                    })()}
                                </p>
                            </div>
                            
                            {!Array.isArray(events) || events.filter(event => event && event.id && !event.is_lxp).length === 0 ? (
                                <div className="modeus-no-events">
                                    <div className="icon">üìÖ</div>
                                    <h3>
                                        {!Array.isArray(events) 
                                            ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' 
                                            : events.length === 0 
                                                ? '–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
                                                : '–í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã'}
                                    </h3>
                                    <p>
                                        {!Array.isArray(events) 
                                            ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
                                            : events.length === 0 
                                                ? '–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.'
                                                : '–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —è–≤–ª—è—é—Ç—Å—è LXP —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –±—ã–ª–∏ —Å–∫—Ä—ã—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.'}
                                    </p>
                                </div>
                            ) : (
                                <>
                                    {/* –ö–Ω–æ–ø–∫–∞ bulk save */}
                                    <div className="modeus-bulk-save">
                                        <button
                                            onClick={handleBulkSaveLinks}
                                            disabled={!Object.values(linkInputs).some(url => url.trim())}
                                        >
                                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
                                        </button>
                                    </div>

                                    <div className="modeus-events-grid">
                                    {events.filter(event => event && event.id && !event.is_lxp).map((event) => (
                                        <div key={event.id} className="modeus-event-card">
                                            {/* –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å–ª–µ–≤–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è */}
                                            <div className={`event-color-strip ${
                                                event.cycle_realization?.name?.includes('–õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ') ? 'lecture' :
                                                event.cycle_realization?.name?.includes('–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ') ? 'practice' :
                                                event.cycle_realization?.name?.includes('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ') ? 'lab' :
                                                event.cycle_realization?.name?.includes('–°–µ–º–∏–Ω–∞—Ä') ? 'seminar' :
                                                'default'
                                            }`}></div>

                                            <div className="event-header">
                                                <h4>
                                                    üìö {event.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                                                    {event.nameShort && (
                                                        <span className="short-name">
                                                            ({event.nameShort})
                                                        </span>
                                                    )}
                                                </h4>
                                                <div className="event-time">
                                                    üïê {event.start ? formatTime(event.start) : '--:--'} - {event.end ? formatTime(event.end) : '--:--'}
                                                    <span className="duration-badge">
                                                        {event.start && event.end ? Math.round((new Date(event.end) - new Date(event.start)) / (1000 * 60)) : '?'} –º–∏–Ω
                                                    </span>
                                                </div>
                                            </div>

                                            <div className="event-details">
                                                {/* –ë–ª–æ–∫ –∫—É—Ä—Å–∞ - –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä */}
                                                <div className="info-block course">
                                                    <div className="label">üìö –ö–£–†–°</div>
                                                    <div className="content">
                                                        {event.course_name || '–ö—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                                                    </div>
                                                </div>

                                                {/* –ë–ª–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä */}
                                                <div className="info-block teacher">
                                                    <div className="label">üë®‚Äçüè´ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨</div>
                                                    <div className="content">
                                                        {event.teacher_full_name || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                                                    </div>
                                                </div>

                                                {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –≤ —Ä—è–¥ */}
                                                <div className="event-info-grid">
                                                
                                                <div className={`info-block type ${
                                                    event.cycle_realization?.name?.includes('–õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ') ? 'lecture' :
                                                    event.cycle_realization?.name?.includes('–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ') ? 'practice' :
                                                    event.cycle_realization?.name?.includes('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ') ? 'lab' :
                                                    event.cycle_realization?.name?.includes('–°–µ–º–∏–Ω–∞—Ä') ? 'seminar' :
                                                    'default'
                                                }`}>
                                                    <div className="label">–¢–ò–ü –ó–ê–ù–Ø–¢–ò–Ø</div>
                                                    <div className="content">
                                                        {
                                                            event.cycle_realization?.name?.includes('–õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ') ? 'üìñ ' :
                                                            event.cycle_realization?.name?.includes('–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ') ? '‚úèÔ∏è ' :
                                                            event.cycle_realization?.name?.includes('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ') ? 'üß™ ' :
                                                            event.cycle_realization?.name?.includes('–°–µ–º–∏–Ω–∞—Ä') ? 'üí¨ ' :
                                                            'üìö '
                                                        }{event.cycle_realization?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                    </div>
                                                </div>

                                                <div className="info-block code">
                                                    <div className="label">–ö–û–î –¶–ò–ö–õ–ê</div>
                                                    <div className="content">
                                                        üìã {event.cycle_realization?.code || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                    </div>
                                                </div>
                                                </div>




                                                {event.description && (
                                                    <div className="info-block description">
                                                        <div className="label">–û–ü–ò–°–ê–ù–ò–ï</div>
                                                        <div className="content">
                                                            üìù {event.description}
                                                        </div>
                                                    </div>
                                                )}
                                            </div>

                                            <div className="modeus-link-section">
                                                <label>üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:</label>
                                                <div className="link-input-container">
                                                    <input
                                                        type="url"
                                                        placeholder="https://my.mts-link.ru/j/58117453/74387679/session/72309048"
                                                        value={linkInputs[event.id] || ''}
                                                        onChange={(e) => handleLinkInputChange(event.id, e.target.value)}
                                                    />
                                                </div>
                                                <small>üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏"</small>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                                </>
                            
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ModeusDaySchedulePage;
