import { useState } from "react";
import Login from "../components/login/login";
import PasswordPrivacyModal from "../components/PasswordPrivacyModal";
import { loginLms, getModeusPersonId, loginNetology, getNetologyCourse } from "../services/api";
import { useLocation, useNavigate } from "react-router-dom";
import '../style/login.scss';
import { toast } from 'react-toastify';
import { debug } from '../utils/debug';
import { handleApiError } from '../utils/errorHandler';

const LoginPage = () => {
    const [isNetologyLoggedIn, setIsNetologyLoggedIn] = useState(false);
    const [isPrivacyModalOpen, setIsPrivacyModalOpen] = useState(false);
    const navigate = useNavigate();
    const location = useLocation();

    const handleNetologyLogin = async (email, password) => {
        let response; // Define response here to be available in catch
        try {
            response = await loginNetology(email, password);

            if (response.status === 200) {
                const token = response.data["_netology-on-rails_session"];
                localStorage.setItem('token', token);
                const courseData = await getNetologyCourse(token);
                localStorage.setItem('calendarId', courseData?.id);
                setIsNetologyLoggedIn(true);
                navigate("/login/modeus");
                return { success: true };
            }

            // --- Keep specific error messages ---
            if (response.status === 401) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
                return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å." };
            }

            if (response.status === 429) {
                const detail = response.data?.detail || '';
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                const timeMatch = detail.match(/(\d+)\s+seconds?/);
                const seconds = timeMatch ? timeMatch[1] : '';
                const message = seconds 
                    ? `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫—É–Ω–¥.`
                    : '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                toast.error(message);
                return { success: false, message: message };
            }
            
            // --- 2. USE HANDLER FOR GENERIC API ERRORS ---
            // Catches 400, 422, 500, 503, etc.
            debug.error("–û—à–∏–±–∫–∞ API –ù–µ—Ç–æ–ª–æ–≥–∏–∏:", response);
            handleApiError({ response: response }, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ù–µ—Ç–æ–ª–æ–≥–∏—é", navigate);
            return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞." };

        } catch (error) {
            // --- 3. USE HANDLER FOR NETWORK/JS ERRORS ---
            debug.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ù–µ—Ç–æ–ª–æ–≥–∏—é:", error);
            // 'error' is a real Error object, so we pass it directly
            handleApiError(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ù–µ—Ç–æ–ª–æ–≥–∏—é", navigate);
            return { success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏." };
        }
    };

    const handleModeusLogin = async (email, password) => {
        if (!email.includes("@") || email.split("@").length - 1 !== 1) {
            toast.error("Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª @.");
            return { success: false };
        }

        let [name, mail] = email.split("@");
        if (mail === "utmn.ru") {
            mail = "study.utmn.ru";
        }
        if (mail !== "study.utmn.ru") {
            toast.error("Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @study.utmn.ru.");
            return { success: false };
        }
        email = `${name}@${mail}`;

        try {
            const modeusResponse = await getModeusPersonId(email, password);
            
            // --- Keep specific Modeus error messages ---
            if (modeusResponse.status === 429) {
                const detail = modeusResponse.data?.detail || '';
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                const timeMatch = detail.match(/(\d+)\s+seconds?/);
                const seconds = timeMatch ? timeMatch[1] : '';
                const message = seconds 
                    ? `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –≤ Modeus. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫—É–Ω–¥.`
                    : '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –≤ Modeus. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                toast.error(message);
                return { success: false };
            }
            if (modeusResponse.status === 401) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è Modeus.");
                return { success: false };
            }
            if (modeusResponse.status === 400 || modeusResponse.status === 422) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Modeus. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–∞—Ä–æ–ª—å.");
                return { success: false };
            }
            // --- Use handler for other Modeus errors (like 500) ---
            if (modeusResponse.status >= 400) { 
                debug.error("–û—à–∏–±–∫–∞ API Modeus:", modeusResponse);
                 handleApiError({ response: modeusResponse }, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Modeus", navigate);
                return { success: false };
            }

            localStorage.setItem('modeus_person_id', modeusResponse.data);

            // --- Keep specific LMS error messages ---
            const lmsResponse = await loginLms(email, password);
            if (lmsResponse.status === 401) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è LMS –ù–µ—Ç–æ–ª–æ–≥–∏–∏.");
                return { success: false };
            }
            if (lmsResponse.status === 400 || lmsResponse.status === 422) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ LMS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.");
                return { success: false };
            }
            // --- Use handler for other LMS errors (like 500) ---
            if (lmsResponse.status >= 400) {
                debug.error("–û—à–∏–±–∫–∞ API LMS:", lmsResponse);
                handleApiError({ response: lmsResponse }, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ LMS", navigate);
                return { success: false };
            }

            localStorage.setItem('lms-id', lmsResponse.data.id);
            localStorage.setItem('lms-token', lmsResponse.data.token);
            
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            navigate("/");
            return { success: true };

        } catch (error) {
            // --- 3. USE HANDLER FOR NETWORK/JS ERRORS ---
            debug.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Modeus/LMS:", error);
            handleApiError(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Modeus –∏–ª–∏ LMS", navigate);
            return { success: false };
        }
    };

    const isNetologyRoute = location.pathname === "/login";
    const isModeusRoute = location.pathname === "/login/modeus";

    return (
        <div className="login-container">
            <h2 className="login-container__title shedule-login">–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h2>

            {isNetologyRoute && (
                <Login
                    key="netology"
                    onLogin={handleNetologyLogin}
                    title="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ù–µ—Ç–æ–ª–æ–≥–∏–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    name="–ù–µ—Ç–æ–ª–æ–≥–∏–∏"
                    formId="netology"
                />
            )}

            {isModeusRoute && isNetologyLoggedIn && (
                <Login
                    key="modeus"
                    onLogin={handleModeusLogin}
                    title="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ú–æ–¥–µ—É—Å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å lms –≤ —Å–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
                    name="–ú–æ–¥–µ—É—Å"
                    formId="modeus"
                />
            )}

            {/* Privacy Information Section */}
            <div className="privacy-info-section">
                <div className="privacy-notice">
                    <div className="privacy-header">
                        <span className="privacy-icon">üîê</span>
                        <h3>–í–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?</h3>
                    </div>
                    <p>
                        –ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª–µ–π. &nbsp;
                        <button 
                            className="privacy-link" 
                            onClick={() => setIsPrivacyModalOpen(true)}
                        >
                            –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –º—ã –∑–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
                        </button>
                    </p>
                </div>
            </div>

            {/* Password Privacy Modal */}
            <PasswordPrivacyModal 
                isOpen={isPrivacyModalOpen} 
                onClose={() => setIsPrivacyModalOpen(false)} 
            />
        </div>
    );
};

export default LoginPage;