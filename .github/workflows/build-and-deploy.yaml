name: build and deploy

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
    paths-ignore:
      - "README.md"
  workflow_dispatch:

env:
  REGISTRY_URL: ghcr.io
  REGISTRY_USERNAME: azamatkomaev
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  IMAGE_TAG: ${{ github.sha }}

  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT }}

  S3_ENDPOINT_URL: ${{ secrets.S3_ENDPOINT_URL }}
  S3_REGION: ${{ secrets.S3_REGION }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }} 


jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.5

      - name: Configure UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --project backend

      - name: Run linters
        run: |
          cd backend
          uv run ruff check yet_another_calendar
          uv run mypy yet_another_calendar

  test:
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.8'
      - name: Configure UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --project backend

      - name: Run tests
        run: |
          cd backend
          uv run pytest yet_another_calendar/tests/*
  

  build:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v4
      - name: Login with Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: Add custom builder
        run: |
          docker buildx create \
            --name container-builder \
            --driver docker-container \
            --bootstrap --use
      - name: Build & Publish backend to Github Container registry
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push ./backend \
                       --tag $REGISTRY_URL/$REGISTRY_USERNAME/yet_another_calendar_backend:latest \
                       --tag $REGISTRY_URL/$REGISTRY_USERNAME/yet_another_calendar_backend:$IMAGE_TAG \
                       --cache-to   type=s3,endpoint_url=$S3_ENDPOINT_URL,region=$S3_REGION,bucket=$BUCKET_NAME,name=calendar_backend,access_key_id=$ACCESS_KEY,secret_access_key=$SECRET_KEY \
                       --cache-from type=s3,endpoint_url=$S3_ENDPOINT_URL,region=$S3_REGION,bucket=$BUCKET_NAME,name=calendar_backend,access_key_id=$ACCESS_KEY,secret_access_key=$SECRET_KEY

      - name: Build & Publish frontend to Github Container registry
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push ./frontend \
                       --tag $REGISTRY_URL/$REGISTRY_USERNAME/yet_another_calendar_frontend:latest \
                       --tag $REGISTRY_URL/$REGISTRY_USERNAME/yet_another_calendar_frontend:$IMAGE_TAG \
                       --cache-to   type=s3,endpoint_url=$S3_ENDPOINT_URL,region=$S3_REGION,bucket=$BUCKET_NAME,name=calendar_frontend,access_key_id=$ACCESS_KEY,secret_access_key=$SECRET_KEY \
                       --cache-from type=s3,endpoint_url=$S3_ENDPOINT_URL,region=$S3_REGION,bucket=$BUCKET_NAME,name=calendar_frontend,access_key_id=$ACCESS_KEY,secret_access_key=$SECRET_KEY

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - run: 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - name: Set up SSH private key.
        run: eval "$(ssh-agent -s)"
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
      - run: ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      - run: ssh-add - <<< "${{ secrets.SSH_KEY }}"
      - name: Add image tag to .version file
        run: |
          echo $IMAGE_TAG > .version
          scp -P 666 .version $SSH_USER@$SSH_HOST:~/YetAnotherCalendar/.version

      - name: Update docker compose
        run: | 
          ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "cd YetAnotherCalendar/ && git pull origin main &&
          YET_ANOTHER_CALENDAR_VERSION=$(cat .version) docker compose -f docker-compose.prod.yaml pull &&
          YET_ANOTHER_CALENDAR_VERSION=$(cat .version) docker compose -f docker-compose.prod.yaml up -d"
    